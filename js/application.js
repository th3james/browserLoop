// Generated by CoffeeScript 1.4.0
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.JST || (window.JST = {});

  window.JST['loop'] = _.template("<h1><%= name %></h1>\n<audio data-role=\"first\" src=\"<%= loopUrl %>\">\n  <p>Your browser does not support the audio element.</p>\n</audio>\n<audio data-role=\"buffer\" src=\"<%= loopUrl %>\">\n  <p>Your browser does not support the audio element.</p>\n</audio>\n<div class='controls'></div>");

  window.JST || (window.JST = {});

  window.JST['loop-controls'] = _.template("<% if (playing) { %>\n  <button class='stop'>Stop</button>\n<% } else { %>\n  <button class='play'>Play</button\n<% }%>");

  window.Backbone || (window.Backbone = {});

  (_base = window.Backbone).Views || (_base.Views = {});

  Backbone.Views.LoopView = (function(_super) {

    __extends(LoopView, _super);

    function LoopView() {
      this.loop = __bind(this.loop, this);

      this.checkReadyToPlay = __bind(this.checkReadyToPlay, this);

      this.stop = __bind(this.stop, this);

      this.play = __bind(this.play, this);

      this.render = __bind(this.render, this);
      return LoopView.__super__.constructor.apply(this, arguments);
    }

    LoopView.prototype.template = JST['loop'];

    LoopView.prototype.controlsTemplate = JST['loop-controls'];

    LoopView.prototype.events = {
      'click .play': 'play',
      'click .stop': 'stop'
    };

    LoopView.prototype.initialize = function(options) {
      this.loopUrl = options.loopUrl;
      this.name = options.name;
      this.playing = false;
      this.listening = false;
      this.first = true;
      this.isReadyToPlay = false;
      this.renderedAudioTags = false;
      return this.render();
    };

    LoopView.prototype.render = function() {
      if (!this.renderedAudioTags) {
        this.renderAudioTags();
      }
      this.renderControls();
      return this;
    };

    LoopView.prototype.renderAudioTags = function() {
      this.$el.html(this.template({
        loopUrl: this.loopUrl,
        name: this.name
      }));
      this.buffer1 = this.$el.find("[data-role='first']")[0];
      this.buffer1.addEventListener('loadeddata', this.checkReadyToPlay);
      this.buffer2 = this.$el.find("[data-role='buffer']")[0];
      this.buffer2.addEventListener('loadeddata', this.checkReadyToPlay);
      return this.renderedAudioTags = true;
    };

    LoopView.prototype.renderControls = function() {
      return this.$el.find('.controls').html(this.controlsTemplate({
        playing: this.playing
      }));
    };

    LoopView.prototype.play = function() {
      this.playing = true;
      this.startListeningToClock();
      return this.render();
    };

    LoopView.prototype.stop = function() {
      this.playing = false;
      this.stopListeningToClock();
      this.buffer1.pause();
      this.buffer2.pause();
      return this.render();
    };

    LoopView.prototype.checkReadyToPlay = function() {
      if (!this.isReadyToPlay && (this.buffer1 != null) && (this.buffer2 != null)) {
        console.log("buffer1 readyState " + this.buffer1.readyState);
        console.log("buffer2 readyState " + this.buffer2.readyState);
        this.isReadyToPlay = this.buffer1.readyState > 1 && this.buffer2.readyState > 1;
        console.log("set is ready to " + this.isReadyToPlay);
      }
      return this.isReadyToPlay;
    };

    LoopView.prototype.loop = function() {
      var startClip, stopClip;
      if (this.isReadyToPlay) {
        if (this.first) {
          startClip = this.buffer1;
          stopClip = this.buffer2;
        } else {
          startClip = this.buffer2;
          stopClip = this.buffer1;
        }
        startClip.currentTime = 110;
        startClip.play();
        setTimeout(function() {
          stopClip.pause();
          return stopClip.currentTime = 110;
        }, window.LOOP_OVERLAP_MS);
        return this.first = !this.first;
      }
    };

    LoopView.prototype.startListeningToClock = function() {
      Backbone.on('tick', this.loop);
      return this.listening = true;
    };

    LoopView.prototype.stopListeningToClock = function() {
      Backbone.off('tick', this.loop);
      return this.listening = false;
    };

    LoopView.prototype.onClose = function() {
      return this.stopListeningToClock();
    };

    return LoopView;

  })(Backbone.View);

  window.Backbone || (window.Backbone = {});

  window.Clock = (function() {

    function Clock() {
      this.play = __bind(this.play, this);
      this.loopTime = 2286;
    }

    Clock.prototype.play = function() {
      Backbone.trigger('tick');
      return setTimeout(this.play, this.loopTime);
    };

    return Clock;

  })();

}).call(this);
